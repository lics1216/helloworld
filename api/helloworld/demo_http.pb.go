// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package helloworld

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type DemoHTTPServer interface {
	CreateDemo(context.Context, *CreateDemoRequest) (*CreateDemoReply, error)
}

func RegisterDemoHTTPServer(s *http.Server, srv DemoHTTPServer) {
	r := s.Route("/")
	r.POST("/demo", _Demo_CreateDemo0_HTTP_Handler(srv))
}

func _Demo_CreateDemo0_HTTP_Handler(srv DemoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDemoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.helloworld.Demo/CreateDemo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDemo(ctx, req.(*CreateDemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDemoReply)
		return ctx.Result(200, reply)
	}
}

type DemoHTTPClient interface {
	CreateDemo(ctx context.Context, req *CreateDemoRequest, opts ...http.CallOption) (rsp *CreateDemoReply, err error)
}

type DemoHTTPClientImpl struct {
	cc *http.Client
}

func NewDemoHTTPClient(client *http.Client) DemoHTTPClient {
	return &DemoHTTPClientImpl{client}
}

func (c *DemoHTTPClientImpl) CreateDemo(ctx context.Context, in *CreateDemoRequest, opts ...http.CallOption) (*CreateDemoReply, error) {
	var out CreateDemoReply
	pattern := "/demo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.helloworld.Demo/CreateDemo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
